package chatRoom4_0;

import java.io.*;  
import java.net.*;  
import java.util.*;  

public class Server {
	
	public static void main(String[] args) {  
        new Server().start();  
    }  
	
	
	private boolean isStart = false;  
    // 服务端socket  
    private ServerSocket ss = null;  
    // 客户端socket  
    private Socket socket = null;  
    // 保存客户端集合  
    Hashtable <String,ClientThread> chat = new Hashtable<String,ClientThread>();  
    
  
    public void start() {  
        try {  
            // 启动服务器  
            ss = new ServerSocket(4008);  
        } catch (BindException e) {  
            System.out.println("端口已在使用中");  
            // 关闭程序  
            System.exit(0);  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
  
        try {  
            isStart = true;  
            while (isStart) {  
                // 启动监听  
                socket = ss.accept();  
                System.out.println("one client connect");  
                // 启动客户端线程  
                ClientThread client = new ClientThread(socket);
                client.setname();
                String name = client.getname();
                
                new Thread(client).start();  
                chat.put(name,client);  
            }  
        } catch (Exception e) {  
            e.printStackTrace();  
        } finally {  
            // 关闭服务  
            try {  
                ss.close();  
            } catch (IOException e) {  
                e.printStackTrace();  
            }  
        }  
  
    }  
  
    /** 
     * 客户端线程 
     *  
     * @author tuzongxun123 
     * 
     */  
    private class ClientThread extends Thread {  
        // 客户端socket  
        private Socket socket = null;  
        // 客户端输入流  
        private DataInputStream dataInputStream = null;  
        // 客户端输出流  
        private DataOutputStream dataOutputStream = null;  
        private boolean isConnect = false;  
        private String myname;
  
        public ClientThread(Socket socket) {  
            this.socket = socket;  
            try {  
                isConnect = true;  
                // 获取客户端输入流  
                dataInputStream = new DataInputStream(socket.getInputStream());  
                // 获取客户端输出流  
                dataOutputStream = new DataOutputStream(socket.getOutputStream());  
            } catch (IOException e) {  
                e.printStackTrace();  
            }  
        }  
  
        // 向客户端群发（转发）数据 
         
        public void sendMessageToClients(String message) {  
            try {  
                dataOutputStream.writeUTF(message); 
                dataOutputStream.flush();
            } catch (SocketException e) {  
  
            } catch (IOException e) {  
                e.printStackTrace();  
            }  
        }  
        public void setname()  {
        	String line = new String("请输入你的名字：");
        	
        	this.sendMessageToClients(line);
        	try {
				myname =  dataInputStream.readUTF();
			} catch (IOException e) {
				e.printStackTrace();
			}
        }
        
        public String getname() {
        	return myname;
        }
  
          
        public void run() {  
            isConnect = true;  
            ClientThread c = null;
            String othername = "";
            if(isConnect) {
            	String line = new String("请输入你想聊天的对象：");
            	this.sendMessageToClients(line);
            	try {
					othername =  dataInputStream.readUTF();
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
            try {  
                while (isConnect) {  
                    // 读取客户端传递的数据  
                    String message = dataInputStream.readUTF();  
                    System.out.println("客户端说：" + message);  
                    if (chat.containsKey(othername)) {  
                        c = chat.get(othername);  
  
                        c.sendMessageToClients(message);  
                    }  
  
                }  
            } catch (EOFException e) {  
                System.out.println("client closed!");  
            } catch (SocketException e) {  
                if (c != null) {  
                    chat.remove(c);  
                }  
                System.out.println("Client is Closed!!!!");  
            } catch (Exception e) {  
                e.printStackTrace();  
            } finally {  
                // 关闭相关资源  
                try {  
                    if (dataInputStream != null) {  
                        dataInputStream.close();  
                    }  
                    if (socket != null) {  
                        socket.close();  
                        socket = null;  
                    }  
                } catch (IOException e) {  
                    e.printStackTrace();  
                }  
            }  
        }  
    }  
 
}
